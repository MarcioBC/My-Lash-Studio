<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Agendamentos</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Estilos gerais para o corpo - PADRONIZADO COM DASHBOARD.HTML */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f7f6; /* Cor de fundo do dashboard */
            color: #333;
            line-height: 1.6;
            min-height: 100vh; /* Garante que o corpo ocupe toda a altura da viewport */
            display: flex;
            flex-direction: column; /* Para que o header fique no topo e o conteúdo abaixo */
        }

        /* Estilos para o cabeçalho (onde o menu ficará) - COPIADO DO DASHBOARD.HTML */
        header {
            background-color: #2c3e50; /* Cor de fundo escura para o cabeçalho */
            color: white;
            padding: 15px 30px; /* Ajustado para 30px nas laterais para melhor espaçamento */
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15); /* Sombra mais suave */
            display: flex;
            justify-content: space-between; /* Espaço entre o título e o menu */
            align-items: center; /* Alinha verticalmente */
            flex-wrap: wrap; /* Permite quebra de linha em telas menores */
            position: sticky; /* Menu fixo no topo ao rolar */
            top: 0;
            z-index: 1000; /* Garante que fique acima de outros elementos */
        }

        header h1 {
            margin: 0;
            font-size: 26px; /* Ajustado para um tamanho consistente */
            font-weight: 600;
            color: #ffbbcd;
        }

        /* Estilos para a navegação (o menu em si) - COPIADO DO DASHBOARD.HTML */
        nav {
            flex-grow: 1; /* Permite que a navegação ocupe espaço para empurrar os itens à direita */
            text-align: right; /* Alinha o texto do nav para a direita */
            margin-left: 20px; /* Espaço entre o título e o menu */
        }

        nav ul {
            list-style: none; /* Remove os pontinhos da lista */
            margin: 0;
            padding: 0;
            display: inline-flex; /* Para que a lista se ajuste ao conteúdo e vá para a direita */
            flex-wrap: wrap;
        }

        /* Adicionado position: relative para os LIs que contêm submenu - COPIADO DO DASHBOARD.HTML */
        nav ul li {
            position: relative;
            margin: 0 18px; /* Espaçamento ajustado */
        }

        /* Estilos para links do menu pai - COPIADO DO DASHBOARD.HTML */
        nav ul li a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 8px 0; /* Mais padding para links clicáveis */
            transition: color 0.3s ease, transform 0.2s ease;
            position: relative; /* Para o efeito de sublinhado */
            display: block; /* Para que o padding e a largura do hover funcionem */
        }

        /* Efeito de sublinhado animado para links - COPIADO DO DASHBOARD.HTML */
        nav ul li a::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            bottom: 0;
            left: 0;
           background-color: #ffbbcd;
            transition: width 0.3s ease;
        }

        nav ul li a:hover::after,
        nav ul li a.active::after {
            width: 100%;
        }

        nav ul li a:hover,
        nav ul li a.active {
            color: #ffbbcd;
            transform: translateY(-2px); /* Pequeno efeito de levantamento */
        }

        /* Estilo para ícones dentro de links do menu - COPIADO DO DASHBOARD.HTML */
        nav ul li a .fas,
        nav ul li a .far,
        nav ul li a .fal,
        nav ul li a .fab {
            margin-right: 5px; /* Espaço entre o ícone e o texto, se houver */
            font-size: 1.1em; /* Ajusta o tamanho do ícone */
        }

        /* Para o ícone de casinha, se for só ele no link do dashboard - COPIADO DO CLIENTES.HTML */
        nav ul li a .fa-home {
            font-size: 1.3em; /* Deixa o ícone de casinha um pouco maior e mais proeminente */
            margin-right: 0; /* Remove margem se não houver texto ao lado */
        }

        /* Estilos para o SUBMENU - COPIADO DO DASHBOARD.HTML */
        .submenu {
            display: none; /* Esconde o submenu por padrão */
            position: absolute;
            background-color: #3b506b; /* Cor de fundo do submenu */
            min-width: 180px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            padding: 10px 0;
            border-radius: 5px;
            left: 50%; /* Centraliza o submenu sob o item pai */
            transform: translateX(-50%);
            top: 100%; /* Posiciona abaixo do item pai */
            white-space: nowrap; /* Evita quebra de linha nos itens do submenu */
        }

        .submenu li {
            margin: 0; /* Remove margem dos itens do submenu */
        }

        .submenu li a {
            color: white;
            padding: 12px 15px; /* Padding para itens do submenu */
            text-decoration: none;
            display: block;
            text-align: left;
            transition: background-color 0.2s ease;
        }

        /* CORRIGIDO: Cor de hover dos submenus para #ffccbd - COPIADO DO DASHBOARD.HTML */
        .submenu li a:hover {
            background-color: #ffccbd; /* Nova cor de destaque no hover do submenu */
            color: #2c3e50; /* Cor do texto no hover para contraste */
        }

        /* Mostrar o submenu ao passar o mouse sobre o LI PAI - COPIADO DO DASHBOARD.HTML */
        nav ul li:hover > .submenu {
            display: block;
        }

        /* Estilos para o botão de Logout - COPIADO DO DASHBOARD.HTML */
        .logout-btn {
            background-color: #dc3545; /* Vermelho */
            color: white;
            padding: 10px 20px; /* Padding maior */
            border: none;
            border-radius: 6px; /* Bordas mais suaves */
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-left: 25px; /* Espaçamento do menu */
            flex-shrink: 0;
        }

        .logout-btn:hover {
            background-color: #c82333; /* Vermelho mais escuro no hover */
            transform: translateY(-2px);
        }

        /* Estilos do Container Principal - AJUSTADO PARA FICAR ABAIXO DO HEADER */
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 1200px;
            margin: 30px auto; /* Adicionado margem superior para espaço do header */
        }

        h2 {
            color:black;
            margin-bottom: 20px;
            text-align: center;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        .actions {
            display: flex;
            gap: 5px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .module-button {
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.9em;
            transition: background-color 0.3s ease;
            white-space: nowrap;
        }

        .edit-button {
            background-color: #ffc107;
            color: #333;
        }

        .delete-button {
            background-color: #dc3545;
            color: white;
        }

        .confirm-button {
            background-color: #28a745;
            color: white;
        }

        .edit-button:hover {
            background-color: #e0a800;
        }

        .delete-button:hover {
            background-color: #c82333;
        }

        .confirm-button:hover {
            background-color: #218838;
        }

        #message {
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 5px;
            display: none;
            text-align: center;
            font-weight: bold;
        }

        .message-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .message-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Estilos para o rodapé - COPIADO DO DASHBOARD.HTML */
        footer {
            margin-top: auto; /* Empurra o rodapé para baixo */
            padding: 20px;
            text-align: center;
            color: #777;
            font-size: 0.9em;
            background-color: #eef2f5; /* Fundo suave para o rodapé */
            border-top: 1px solid #e0e0e0;
        }

        /* Responsividade para telas menores - COMBINADO DO DASHBOARD.HTML E NOVAS REGRAS */
        @media (max-width: 900px) {
            header { /* COPIADO DO DASHBOARD.HTML */
                flex-direction: column;
                align-items: flex-start;
                padding: 15px 20px;
            }
            header h1 { /* COPIADO DO DASHBOARD.HTML */
                margin-bottom: 10px;
                text-align: center;
                width: 100%;
            }
            nav { /* COPIADO DO DASHBOARD.HTML */
                width: 100%;
                margin-left: 0;
                text-align: center;
                margin-bottom: 15px;
            }
            nav ul { /* COPIADO DO DASHBOARD.HTML */
                flex-direction: column;
                align-items: center;
                display: flex;
                width: 100%;
            }
            nav ul li { /* COPIADO DO DASHBOARD.HTML */
                margin: 5px 0;
            }
            .logout-btn { /* COPIADO DO DASHBOARD.HTML */
                margin-left: 0;
                width: 100%;
                text-align: center;
                padding: 12px;
            }

            /* Submenu em telas menores - COPIADO DO DASHBOARD.HTML */
            .submenu {
                position: static;
                display: block !important;
                width: 100%;
                box-shadow: none;
                padding: 0;
                border-radius: 0;
                background-color: #3b506b;
            }
            .submenu li a {
                padding: 8px 30px;
                background-color: rgba(0,0,0,0.1);
            }
            .submenu li a:hover {
                background-color: #ffccbd;
                color: #2c3e50;
            }

            /* Estilos específicos para agendamentos_lista.html em telas menores */
            .container {
                padding: 15px;
                width: 98%;
            }
            /* Torna a tabela rolavel horizontalmente em telas pequenas */
            table {
                display: block;
                overflow-x: auto;
                white-space: nowrap; /* Evita quebra de linha dentro das células */
                width: 100%; /* Garante que a tabela use toda a largura disponível antes de rolar */
            }
            /* Garante que as células da tabela não quebrem a linha */
            th, td {
                white-space: nowrap;
                min-width: 80px; /* Garante uma largura mínima para as colunas */
            }
            .actions {
                flex-direction: column; /* Empilha os botões de ação */
                align-items: stretch;
            }
            .module-button {
                width: 100%; /* Botões de ação ocupam 100% da largura na coluna */
                margin-bottom: 5px; /* Espaço entre os botões empilhados */
            }
        }
        @media (max-width: 500px) { /* Ajustes para telas muito pequenas */
            .container {
                padding: 10px;
            }
            h2 {
                font-size: 1.5em;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Studio JéMarqui</h1>
        <nav>
            <ul>
                <li><a href="dashboard.html"><i class="fas fa-home"></i></a></li>

                <li class="menu-item-with-submenu">
                    <a href="javascript:void(0);" onclick="toggleSubmenu(this)">Clientes</a>
                    <ul class="submenu">
                        <li><a href="clientes.html">Cadastrar Clientes</a></li>
                        <li><a href="consultar_clientes.html">Consultar Clientes</a></li>
                    </ul>
                </li>
                <li class="menu-item-with-submenu">
                    <a href="javascript:void(0);" onclick="toggleSubmenu(this)">Agendamentos</a>
                    <ul class="submenu">
                        <li><a href="agendamentos.html">Novo Agendamento</a></li>
                        <li><a href="agendamentos_lista.html">Lista de Agendamentos</a></li>
                    </ul>
                </li>
                <li class="menu-item-with-submenu">
                    <a href="javascript:void(0);" onclick="toggleSubmenu(this)">Transações</a>
                    <ul class="submenu">
                        <li><a href="transacoes.html">Livro Caixa</a></li>
                    </ul>
                </li>
                <li class="menu-item-with-submenu">
                    <a href="javascript:void(0);" onclick="toggleSubmenu(this)">Usuários</a>
                    <ul class="submenu">
                        <li><a href="usuarios.html">Gerenciar Usuários</a></li>
                    </ul>
                </li>
                <li class="menu-item-with-submenu">
                    <a href="javascript:void(0);" onclick="toggleSubmenu(this)">Relatórios</a>
                    <ul class="submenu">
                        <li><a href="relatorios.html">Visualizar Relatórios</a></li>
                    </ul>
                </li>
                <li><button class="logout-btn" onclick="logout()">Sair</button></li>
            </ul>
        </nav>
    </header>

    <div class="container">
        <h2>Lista de Agendamentos</h2>
        <div id="message"></div>
        <table id="agendamentosTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Cliente</th>
                    <th>Data e Hora</th>
                    <th>Procedimentos</th>
                    <th>Valor Total</th>
                    <th>Status</th>
                    <th>Observações</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody id="agendamentosBody">
            </tbody>
        </table>
        </div>

    <footer>
        <p>&copy; 2024 Meu Estúdio. Todos os direitos reservados.</p>
    </footer>

    <script>
        // Funções JavaScript COPIADAS DO DASHBOARD.HTML
        function toggleSubmenu(element) {
            const submenu = element.nextElementSibling;
            if (submenu && submenu.classList.contains('submenu')) {
                if (window.innerWidth <= 900) {
                    submenu.style.display = (submenu.style.display === 'block' || submenu.style.display === '') ? 'none' : 'block';
                }
            }
        }

        function logout() {
            alert('Você foi desconectado!');
            window.location.href = 'login.html';
        }

        // SEU CÓDIGO JAVASCRIPT EXISTENTE PARA agendamentos_lista.html
        const agendamentosTableBody = document.getElementById('agendamentosTable').getElementsByTagName('tbody')[0];
        const messageDiv = document.getElementById('message');

        function showMessage(msg, type) {
            messageDiv.textContent = msg;
            messageDiv.className = '';
            messageDiv.classList.add(type === 'success' ? 'message-success' : 'message-error');
            messageDiv.style.display = 'block';
            setTimeout(() => { messageDiv.style.display = 'none'; }, 3000);
        }

        async function loadAgendamentos() {
            try {
                // Modificado para chamar a rota principal /api/agendamentos
                // que já retorna os dados populados e formatados
                const agendamentosResponse = await fetch('http://localhost:3001/api/agendamentos');
                if (!agendamentosResponse.ok) {
                    throw new Error(`HTTP error! status: ${agendamentosResponse.status}`);
                }
                // O backend já deve retornar os dados com clienteNome, procedimentosNomes, data e hora formatados
                const agendamentos = await agendamentosResponse.json();

                agendamentosTableBody.innerHTML = ''; // Limpa a tabela antes de preencher

                if (agendamentos.length === 0) {
                    agendamentosTableBody.innerHTML = '<tr><td colspan="8">Nenhum agendamento encontrado.</td></tr>';
                    return;
                }

                agendamentos.forEach(agendamento => {
                    const row = agendamentosTableBody.insertRow();

                    // Coluna 1: ID (Primeiros 6 caracteres do ID)
                    row.insertCell().textContent = agendamento._id.substring(0, 6);

                    // Coluna 2: Cliente (Nome) - Agora vem diretamente do backend
                    row.insertCell().textContent = agendamento.clienteNome || 'Cliente Desconhecido';

                    // Coluna 3: Data e Hora - **MANTER COMO ESTÁ, POIS O BACKEND DEVE ENVIAR `data` E `hora` JÁ FORMATADOS.**
                    // SE CONTINUAR SAINDO N/A, VOCÊ PRECISA VERIFICAR O BACKEND!
                    const dataHoraCell = row.insertCell();
                    dataHoraCell.textContent = `${agendamento.data || 'N/A'} às ${agendamento.hora || 'N/A'}`;


                    // Coluna 4: Procedimentos (Nomes) - Agora vem diretamente do backend
                    row.insertCell().textContent = agendamento.procedimentosNomes || 'N/A';

                    // Coluna 5: Valor Total
                    // O backend já deve ter calculado o valor total
                    row.insertCell().textContent = `R$ ${parseFloat(agendamento.valorTotal || 0).toFixed(2).replace('.', ',')}`;

                    // Coluna 6: Status
                    row.insertCell().textContent = agendamento.status ? (agendamento.status.charAt(0).toUpperCase() + agendamento.status.slice(1)) : 'N/A';

                    // Coluna 7: Observações
                    row.insertCell().textContent = agendamento.observacoes || 'N/A';

                    // Coluna 8: Ações (Botões)
                    const actionsCell = row.insertCell();
                    actionsCell.classList.add('actions');

                    // Botão de Editar
                    const editButton = document.createElement('a');
                    editButton.href = `agendamentos_editar.html?id=${agendamento._id}`;
                    editButton.textContent = 'Editar';
                    editButton.classList.add('module-button', 'edit-button');
                    actionsCell.appendChild(editButton);

                    // Botão de Excluir
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Excluir';
                    deleteButton.classList.add('module-button', 'delete-button');
                    deleteButton.onclick = () => deleteAgendamento(agendamento._id);
                    actionsCell.appendChild(deleteButton);

                    // Botão de Confirmar (visível apenas se o status for "pendente")
                    if (agendamento.status && agendamento.status.toLowerCase() === 'pendente') {
                        const confirmBtn = document.createElement('button');
                        confirmBtn.textContent = 'Confirmar';
                        confirmBtn.classList.add('module-button', 'confirm-button');
                        confirmBtn.onclick = () => confirmAgendamento(agendamento._id);
                        actionsCell.appendChild(confirmBtn);
                    }
                });
            } catch (error) {
                console.error('Erro ao carregar agendamentos:', error);
                showMessage('Erro ao carregar a lista de agendamentos. Verifique o console para mais detalhes.', 'error');
                agendamentosTableBody.innerHTML = '<tr><td colspan="8">Erro ao carregar agendamentos.</td></tr>';
            }
        }

        async function deleteAgendamento(id) {
            if (confirm("Tem certeza que deseja excluir este agendamento?")) {
                try {
                    const response = await fetch(`http://localhost:3001/api/agendamentos/${id}`, {
                        method: 'DELETE',
                    });
                    // Para DELETE, o status 204 (No Content) é comum e não retorna JSON
                    if (response.status === 204) {
                        showMessage('Agendamento excluído com sucesso!', 'success');
                        loadAgendamentos();
                    } else {
                        const data = await response.json(); // Tenta ler JSON para mensagens de erro
                        showMessage(data.message || 'Erro desconhecido ao excluir agendamento.', 'error');
                    }
                } catch (error) {
                    console.error('Erro ao excluir agendamento:', error);
                    showMessage('Erro de conexão ou servidor ao excluir agendamento.', 'error');
                }
            }
        }

        async function confirmAgendamento(id) {
            if (!confirm('Tem certeza que deseja CONFIRMAR este agendamento? Ele será registrado como receita.')) {
                return;
            }
            try {
                const response = await fetch(`http://localhost:3001/api/agendamentos/${id}/confirmar`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });

                const data = await response.json();
                if (response.ok) {
                    showMessage(data.message, 'success');
                    loadAgendamentos();
                } else {
                    showMessage(data.message || 'Erro ao confirmar agendamento.', 'error');
                }
            } catch (error) {
                console.error('Erro ao confirmar agendamento:', error);
                showMessage('Erro de conexão ou servidor ao atualizar agendamento.', 'error');
            }
        }

        // Carrega os agendamentos quando a página é carregada
        loadAgendamentos();
    </script>
</body>
</html>